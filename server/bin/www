#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

var app = require("../app");
var http = require("http");

const { sendNotification } = require("../utils/sendNotification");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * socket io connection
 */
const io = require("socket.io")(server);

// Hash map that stores mongoDB user IDs as keys and user socket IDs as values.
const onlineUsers = new Map();

io.on("connection", (socket) => {
  console.log("user conected");
  
  socket.on("join", ({ data }) => {
    const room = data.userId;
    socket.join(room);
  });

  socket.on("message", (messageData, callback) => {
    const room = messageData.room;
    const data = {
      content: messageData.content,
      chatId: messageData.chatId,
      sender: messageData.sender,
      timeCreated: messageData.timeCreated,
      wasRead: false,
    };
    io.to(room).emit("newMessage", data);
  })

  socket.on("online", (data) => {
    onlineUsers.set(data.userId, socket.id);
    console.log(onlineUsers);
  });

  socket.on("offline", (data) => {
    onlineUsers.delete(data.userId);
  });

  socket.on("requestAccepted", (notification) => {
    sendNotification(notification.ownerId, notification.message);
  });

  socket.on("requestDeclined", (notification) => {
    sendNotification(notification.ownerId, notification.message);
  });

  socket.on("requestSent", (notification) => {
    // Add into notifications list in database for sitter.
    sendNotification(notification.sitterId, notification.message);

    // Update current user's socket id
    onlineUsers.set(notification.ownerId, socket.id);

    // Emit notification to sitter"
    const receiver = onlineUsers.get(notification.sitterId);

    // console.log(io.sockets.sockets.get(receiver).client);

    if (receiver) {
      console.log(`Sending to ${receiver}...`);

      io.to(receiver).emit("notification", {
        type: "request",
        message: notification.message,
      });
    } else {
      console.log("User is offline");
    }
  });

  socket.on("disconnect", () => {
    console.log("user disconnected");
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
